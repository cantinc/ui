import{e as n,C as e}from"./Component-e48f854d.js";import{I as t}from"./Input-6fe500eb.js";import{F as o,S as r}from"./docs-8f3430fd.js";import{I as l}from"./Icon-39921375.js";import{B as i}from"./Button-912f81e3.js";import"./Typography-31c2c0c4.js";var p=n({id:"autofocus",title:"autofocus",description:"`autofocus` focus on the element.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Input } from '@cantinc/ui'\n\ninnet(\n  <Input autofocus />,\n  dom,\n)",example:{type:t,props:{autofocus:!0}}}),a=n({id:"beforeAfter",title:"before & after",description:"By default, shows an input\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Input, Icon } from '@cantinc/ui'\n\ninnet(\n  <Input\n    placeholder='Enter count'\n    gap={8}\n    inline>\n    <slot name='before'>\n      <Icon icon='minus' />\n    </slot>\n    <slot name='after'>\n      <Icon icon='plus' />\n    </slot>\n  </Input>,\n  dom,\n)",example:{type:t,props:{placeholder:"Enter count",gap:8,inline:!0},children:[{type:"slot",props:{name:"before"},children:[{type:l,props:{icon:"minus"}}]},{type:"slot",props:{name:"after"},children:[{type:l,props:{icon:"plus"}}]}]}});const c=new r("test");var s=n({id:"clearable",title:"clearable",description:"You can make the input clearable with `clearable` prop.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Input, Flex } from '@cantinc/ui'\n\nconst label = new State('test')\n\ninnet(\n  <Flex wrap gap={16}>\n    <Input flex clearable value={label} />\n    <Input flex label={label} clearable />\n  </Flex>,\n  dom,\n)",example:{type:o,props:{wrap:!0,gap:16},children:[{type:t,props:{flex:!0,clearable:!0,value:c}},{type:t,props:{flex:!0,label:c,clearable:!0}}]}});const m=new r("");var d=n({id:"error",title:"error",description:"You can show an error with `error` slot.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Button, Flex, Input } from '@cantinc/ui'\n\nconst error = new State('')\n\ninnet(\n  <Flex vertical>\n    <Input error />\n    <Input placeholder='Placeholder' error />\n    <Input label='Label' error />\n    <Input error>\n      <slot name='hint'>\n        Static error\n      </slot>\n    </Input>\n    <Input error={() => Boolean(error.value)}>\n      <slot name='hint'>\n        {() => error.value}\n      </slot>\n    </Input>\n    <Button onclick={() => {\n      error.value = error.value ? '' : 'Error message...'\n    }}>\n      Click Me\n    </Button>\n  </Flex>,\n  dom,\n)",example:{type:o,props:{vertical:!0},children:[{type:t,props:{error:!0}},{type:t,props:{placeholder:"Placeholder",error:!0}},{type:t,props:{label:"Label",error:!0}},{type:t,props:{error:!0},children:[{type:"slot",props:{name:"hint"},children:["Static error"]}]},{type:t,props:{error:()=>Boolean(m.value)},children:[{type:"slot",props:{name:"hint"},children:[()=>m.value]}]},{type:i,props:{onclick:()=>{m.value=m.value?"":"Error message..."}},children:["Click Me"]}]}});const u=new r("");var h=n({id:"hint",title:"hint",description:"You can show an error with `error` slot.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Flex, Button, Input } from '@cantinc/ui'\n\nconst hint = new State('')\n\ninnet(\n  <Flex vertical>\n    <Input>\n      <slot name='hint'>\n        Static hint\n      </slot>\n    </Input>\n    <Input>\n      <slot name='hint'>\n        {() => hint.value}\n      </slot>\n    </Input>\n    <Button onclick={() => {\n      hint.value = hint.value ? '' : 'Hint message...'\n    }}>\n      Click Me\n    </Button>\n  </Flex>,\n  dom,\n)",example:{type:o,props:{vertical:!0},children:[{type:t,children:[{type:"slot",props:{name:"hint"},children:["Static hint"]}]},{type:t,children:[{type:"slot",props:{name:"hint"},children:[()=>u.value]}]},{type:i,props:{onclick:()=>{u.value=u.value?"":"Hint message..."}},children:["Click Me"]}]}});const f=new r("");var x=n({id:"hintError",title:"hint & error",description:"You can show an error with `error` slot.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Button, Flex, Input } from '@cantinc/ui'\n\nconst error = new State('')\n\ninnet(\n  <Flex vertical>\n    <Input error={() => Boolean(error.value)}>\n      <slot name='hint'>\n        {() => error.value || 'Hint message...'}\n      </slot>\n    </Input>\n    <Button onclick={() => {\n      error.value = error.value ? '' : 'Error message...'\n    }}>\n      Click Me\n    </Button>\n  </Flex>,\n  dom,\n)",example:{type:o,props:{vertical:!0},children:[{type:t,props:{error:()=>Boolean(f.value)},children:[{type:"slot",props:{name:"hint"},children:[()=>f.value||"Hint message..."]}]},{type:i,props:{onclick:()=>{f.value=f.value?"":"Error message..."}},children:["Click Me"]}]}}),y=n({id:"inline",title:"inline",description:"`Input` extends `inline` property from [Flex](/layout/flex#inline)\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Input } from '@cantinc/ui'\n\ninnet(\n  <>\n    <Input />\n    <Input label='Inline 1' inline />\n    <span style='width:20px;display:inline-block' />\n    <Input label='Inline 2' inline />\n  </>,\n  dom,\n)",example:[{type:t},{type:t,props:{label:"Inline 1",inline:!0}},{type:"span",props:{style:"width:20px;display:inline-block"}},{type:t,props:{label:"Inline 2",inline:!0}}]}),I=n({id:"labelPlaceholder",title:"label & placeholder",description:"Use `label` or `placeholder` to describe an input.\n\nYou can use them together.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Input, Flex } from '@cantinc/ui'\n\ninnet(\n  <Flex gap={16} wrap>\n    <Input\n      flex\n      label='Label'\n    />\n    <Input\n      flex\n      placeholder='Placeholder'\n    />\n    <Input\n      flex\n      label='Label'\n      placeholder='Placeholder'\n    />\n  </Flex>,\n  dom,\n)",example:{type:o,props:{gap:16,wrap:!0},children:[{type:t,props:{flex:!0,label:"Label"}},{type:t,props:{flex:!0,placeholder:"Placeholder"}},{type:t,props:{flex:!0,label:"Label",placeholder:"Placeholder"}}]}});const b=new r(!0);var g=[p,n({id:"loading",title:"loading",description:"Before default value loads, you can show skeleton UI with `loading`.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Input, Button } from '@cantinc/ui'\n\nconst loading = new State(true)\n\nconst toggle = () => {\n  loading.value = !loading.value\n}\n\ninnet(\n  <>\n    <Input label='Loading' loading={loading} />\n    <Button onclick={toggle}>\n      Click Me\n    </Button>\n  </>,\n  dom,\n)",example:[{type:t,props:{label:"Loading",loading:b}},{type:i,props:{onclick:()=>{b.value=!b.value}},children:["Click Me"]}]}),y,s,n({id:"padding",title:"padding",description:"Use `padding` to change input padding. Extends from [Flex](/layout/flex#padding)\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Flex, Input } from '@cantinc/ui'\n\ninnet(\n  <Flex gap={[0, 8]} wrap>\n    <Input\n      flex\n      padding={[0, 8]}\n      placeholder='Placeholder...'\n    />\n    <Input\n      flex\n      padding={8}\n      label='Label...'\n    />\n    <Input\n      flex\n      padding={[16, 8, 8, 16]}\n      label='Label...'\n    />\n  </Flex>,\n  dom,\n)",example:{type:o,props:{gap:[0,8],wrap:!0},children:[{type:t,props:{flex:!0,padding:[0,8],placeholder:"Placeholder..."}},{type:t,props:{flex:!0,padding:8,label:"Label..."}},{type:t,props:{flex:!0,padding:[16,8,8,16],label:"Label..."}}]}}),I,h,d,x,a],v=()=>({type:e,props:{component:t,name:"Input",description:"# Input\n\nUse the component to add input text element.\n\n```typescript\nimport { Input } from '@cantinc/ui'\n```\n\n## Extends\n\n- [Flex](/layout/flex)\n\n## Extend\n\n- [Selector](/interaction/selector)\n- [Textarea](/interaction/textarea)\n- [FormInput](/forms/input)\n- [SearchInput](/search/input)\n",examples:g}});export{v as default};
