import{e as n,C as t}from"./Component-15ffbf72.js";import{O as o,_ as e,j as s,s as l,Q as a,u as r,d as i,R as p,S as d,o as c,c as h,F as m,T as u,a as f,J as y}from"./docs-7f82f961.js";import{O as w}from"./Overlay-9144d9ae.js";import{B as v}from"./Button-53a5d86c.js";import{s as M}from"./setOverflow-f4cd0921.js";import{I as b}from"./Icon-29e1e026.js";import{s as B}from"./stringifySearch.es6-8742c2cd.js";import"./Typography-fec4f26f.js";import"./useListener-ff43f1fd.js";function g(){!function(n){if(!("modal"in n))return;const{modal:t}=n,o=e(n,["modal"]);if(!Array.isArray(t)){const n=B(o);return void s.push(n?`?${n}`:s.path,-1)}const l=t.slice(0,-1),a=B(Object.assign(Object.assign({},o),{modal:l.length>1?l:l[0]}));s.push(a?`?${a}`:s.path,-1)}(o.value)}const x=l(a);function T(n){const t=r(),o=x();return{type:w,props:{justify:"center",align:"center",...n,class:()=>o.root},children:[t]}}const j=l(u);let k=0;function S(n={}){var{buttons:t,width:o,style:s="",headButtons:l=["close"],buttonProps:a={},onclosed:r,onclose:u,onshow:y,onmousedown:w}=n,B=e(n,["buttons","width","style","headButtons","buttonProps","onclosed","onclose","onshow","onmousedown"]);const g=j(),x=i(),{"":T,title:S,content:C,subTitle:O}=x,U=e(x,["","title","content","subTitle"]),$=new p,A=new d(!1),F=new p,L=null==l?void 0:l.length,R=null==t?void 0:t.length;s=o?()=>`--ui-modal-width:${o}px;${f(s)}`:s,"button-close"in U||(U["button-close"]={type:b,props:{icon:"cross"}}),setTimeout((()=>{A.value=!0,null==y||y()}),300);const H=n=>{var t;if(null===(t=$.value)||void 0===t?void 0:t.value)return;const o=()=>null==r?void 0:r(n);if(u)return u(n,o);o()};return k||M("hidden"),k++,c((()=>{k--,k||M("")})),{type:"delay",props:{ref:$,hide:300},children:[{type:"div",props:{...B,style:s,ref:F,_close:()=>H,class:()=>{var n;return h([g.root,A.value&&g.show,(null===(n=$.value)||void 0===n?void 0:n.value)&&g.hide])}},children:[S?{type:"header",props:{class:g.header},children:[S||null," ",O&&{type:"div",props:{class:g.subTitle},children:[O]}]}:null," ",L?{type:"div",props:{class:g.headButtons},children:[l.map((n=>({type:"button",props:{...a[n],"data-button":n,onclick:()=>H(n),class:g.headButton},children:[U[`button-${n}`]||n]})))]}:null," ",C&&{type:"div",props:{class:g.content},children:[C]}," ",T," ",R?{type:m,props:{reverse:!0,justify:"center",wrap:!0,padding:16,gap:16},children:[t.map(((n,t)=>({type:v,props:{flex:!0,view:t?"secondary":"primary",...a[n],"data-button":n,onclick:()=>H(n)},children:[U[`button-${n}`]||n]})))]}:null]}]}}const C=new d(!1);var O=n({id:"buttons",title:"buttons",description:"Use `buttons` property of `Modal`, to add buttons.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Modals, Modal, Notifications, Button, notify } from '@cantinc/ui'\n\nconst show = new State(false)\n\ninnet(\n  <>\n    <Button onclick={() => { show.value = true }}>\n      show\n    </Button>\n    <Modals>\n      <show state={show}>\n        <Modal\n          buttons={['Ok', 'Cancel']}\n          onclose={result => {\n            show.value = false\n            notify(result)\n          }}>\n          <slot name='content'>\n            Content\n          </slot>\n        </Modal>\n      </show>\n    </Modals>\n    <Notifications />\n  </>,\n  dom,\n)",example:[{type:"portal",props:{parent:document.body},children:[{type:T,children:[{type:"show",props:{state:C},children:[{type:S,props:{buttons:["Ok","Cancel"],onclose:n=>{C.value=!1,y(n)}},children:[{type:"slot",props:{name:"content"},children:["Content"]}]}]}]}]},{type:v,props:{onclick:()=>{C.value=!0}},children:["show"]}]});const U=new d(!1);var $=n({id:"head-buttons",title:"headButtons",description:"Use `headButtons` property of `Modal`, to add buttons into header.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Modals, Modal, Button } from '@cantinc/ui'\n\nconst show = new State(false)\n\ninnet(\n  <>\n    <Button onclick={() => { show.value = true }}>\n      show\n    </Button>\n    <Modals>\n      <show state={show}>\n        <Modal headButtons={['Log-in', 'close']} onclose={() => { show.value = false }}>\n          <slot name='title'>\n            Sign-in\n          </slot>\n          <slot name='content'>\n            Sign-in form should be here...\n          </slot>\n        </Modal>\n      </show>\n    </Modals>\n  </>,\n  dom,\n)",example:[{type:"portal",props:{parent:document.body},children:[{type:T,children:[{type:"show",props:{state:U},children:[{type:S,props:{headButtons:["Log-in","close"],onclose:()=>{U.value=!1}},children:[{type:"slot",props:{name:"title"},children:["Sign-in"]},{type:"slot",props:{name:"content"},children:["Sign-in form should be here..."]}]}]}]}]},{type:v,props:{onclick:()=>{U.value=!0}},children:["show"]}]});const A=new d(!1);var F=n({id:"modal",title:"modal",description:"Use `Modal` inside `Modals`\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Modals, Modal, Button } from '@cantinc/ui'\n\nconst show = new State(false)\n\ninnet(\n  <>\n    <Button onclick={() => { show.value = true }}>\n      show\n    </Button>\n    <Modals>\n      <show state={show}>\n        <Modal onclose={() => { show.value = false }}>\n          <slot name='content'>\n            Content\n          </slot>\n        </Modal>\n      </show>\n    </Modals>\n  </>,\n  dom,\n)",example:[{type:"portal",props:{parent:document.body},children:[{type:T,children:[{type:"show",props:{state:A},children:[{type:S,props:{onclose:()=>{A.value=!1}},children:[{type:"slot",props:{name:"content"},children:["Content"]}]}]}]}]},{type:v,props:{onclick:()=>{A.value=!0}},children:["show"]}]}),L=n({id:"search",title:"search",description:"This example present that you can use search query params to show modals.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Modals, Modal, Button, Flex, closeRouterModal } from '@cantinc/ui'\n\ninnet(\n  <>\n    <a href='?modal=test1'>Test 1</a>\n    <a href='?modal=test2'>Test 2</a>\n    <Modals>\n      <router ish search='modal'>\n        <slot name='test1'>\n          <Modal headButtons={[]}>\n            <Button onclick={closeRouterModal}>\n              Close\n            </Button>\n          </Modal>\n        </slot>\n        <slot name='test2'>\n          <Modal onclose={closeRouterModal}>\n            <slot name='title'>\n              Test 2\n            </slot>\n            <slot name='content'>\n              <Flex gap={16}>\n                <a href='?modal=test2&modal=test1'>\n                  Keep current modal\n                </a>\n                <a href='?modal=test1'>\n                  Hide current modal\n                </a>\n              </Flex>\n            </slot>\n          </Modal>\n        </slot>\n      </router>\n    </Modals>\n  </>,\n  dom,\n)",example:[{type:"portal",props:{parent:document.body},children:[{type:T,children:[{type:"router",props:{ish:!0,search:"modal"},children:[{type:"slot",props:{name:"test1"},children:[{type:S,props:{headButtons:[]},children:[{type:v,props:{onclick:g},children:["Close"]}]}]},{type:"slot",props:{name:"test2"},children:[{type:S,props:{onclose:g},children:[{type:"slot",props:{name:"title"},children:["Test 2"]},{type:"slot",props:{name:"content"},children:[{type:m,props:{gap:16},children:[{type:"a",props:{href:"?modal=test2&modal=test1"},children:["Keep current modal"]},{type:"a",props:{href:"?modal=test1"},children:["Hide current modal"]}]}]}]}]}]}]}]},{type:"a",props:{href:"?modal=test1"},children:["Test 1"]},{type:"a",props:{href:"?modal=test2"},children:["Test 2"]}]});const R=new d(!1);var H=[F,n({id:"title",title:"title",description:"Use `title` slot to add a title.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Modals, Modal, Button } from '@cantinc/ui'\n\nconst show = new State(false)\n\ninnet(\n  <>\n    <Button onclick={() => { show.value = true }}>\n      show\n    </Button>\n    <Modals>\n      <show state={show}>\n        <Modal onclose={() => { show.value = false }}>\n          <slot name='title'>\n            Title\n          </slot>\n          <slot name='content'>\n            Content\n          </slot>\n        </Modal>\n      </show>\n    </Modals>\n  </>,\n  dom,\n)",example:[{type:"portal",props:{parent:document.body},children:[{type:T,children:[{type:"show",props:{state:R},children:[{type:S,props:{onclose:()=>{R.value=!1}},children:[{type:"slot",props:{name:"title"},children:["Title"]},{type:"slot",props:{name:"content"},children:["Content"]}]}]}]}]},{type:v,props:{onclick:()=>{R.value=!0}},children:["show"]}]}),O,$,L],N=()=>({type:t,props:{component:T,name:"Modals",description:"# Modals\n\nUse this component to show modal windows\n\n```typescript\nimport { Modals, Modal } from '@cantinc/ui'\n```\n\n## Usage\n\nAdd `Modals` into a place you want to put modal HTML elements.\n\n```tsx\nfunction App () {\n  return (\n    <>\n      <div id='root'>...</div>\n      <Modals>\n        ...\n      </Modals>\n    </>\n  )\n}\n```\n\n*Note: put it inside an element without parents that have css property of `transform`.*\n\nYou can use `portal` to add modals anywhere.\n\n```tsx\nfunction Global () {\n  return (\n    <portal parent={document.body}>\n      \x3c!-- Other stuff --\x3e\n      <Modals>\n        ...\n      </Modals>\n    </portal>\n  )\n}\n```\n",examples:H}});export{N as default};
