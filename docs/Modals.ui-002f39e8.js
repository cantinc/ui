import{e as n,C as t}from"./Component-d6910b8d.js";import{X as o,_ as e,l as s,Y as a,Z as l,V as r,B as p,S as d,F as i}from"./docs-9c5485ea.js";import{s as c}from"./stringifySearch.es6-badcb67d.js";import"./Typography-794137ee.js";function m(){!function(n){if(!("modal"in n))return;const{modal:t}=n,o=e(n,["modal"]);if(!Array.isArray(t)){const n=c(o);return void s.push(n?`?${n}`:s.path,-1)}const a=t.slice(0,-1),l=c(Object.assign(Object.assign({},o),{modal:a.length>1?a:a[0]}));s.push(l?`?${l}`:s.path,-1)}(o.value)}const h=new d(!1);var u=n({id:"buttons",title:"buttons",description:"Use `buttons` property of `Modal`, to add buttons.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Modals, Modal, Notifications, Button, notify } from '@cantinc/ui'\n\nconst show = new State(false)\n\ninnet(\n  <>\n    <Button onclick={() => { show.value = true }}>\n      show\n    </Button>\n    <Modals>\n      <show state={show}>\n        <Modal\n          buttons={['Ok', 'Cancel']}\n          onclose={result => {\n            show.value = false\n            notify(result)\n          }}>\n          <slot name='content'>\n            Content\n          </slot>\n        </Modal>\n      </show>\n    </Modals>\n    <Notifications />\n  </>,\n  dom,\n)",example:[{type:"portal",props:{parent:document.body},children:[{type:a,children:[{type:"show",props:{state:h},children:[{type:l,props:{buttons:["Ok","Cancel"],onclose:n=>{h.value=!1,r(n)}},children:[{type:"slot",props:{name:"content"},children:["Content"]}]}]}]}]},{type:p,props:{onclick:()=>{h.value=!0}},children:["show"]}]});const y=new d(!1);var f=n({id:"head-buttons",title:"headButtons",description:"Use `headButtons` property of `Modal`, to add buttons into header.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Modals, Modal, Button } from '@cantinc/ui'\n\nconst show = new State(false)\n\ninnet(\n  <>\n    <Button onclick={() => { show.value = true }}>\n      show\n    </Button>\n    <Modals>\n      <show state={show}>\n        <Modal headButtons={['Log-in', 'close']} onclose={() => { show.value = false }}>\n          <slot name='title'>\n            Sign-in\n          </slot>\n          <slot name='content'>\n            Sign-in form should be here...\n          </slot>\n        </Modal>\n      </show>\n    </Modals>\n  </>,\n  dom,\n)",example:[{type:"portal",props:{parent:document.body},children:[{type:a,children:[{type:"show",props:{state:y},children:[{type:l,props:{headButtons:["Log-in","close"],onclose:()=>{y.value=!1}},children:[{type:"slot",props:{name:"title"},children:["Sign-in"]},{type:"slot",props:{name:"content"},children:["Sign-in form should be here..."]}]}]}]}]},{type:p,props:{onclick:()=>{y.value=!0}},children:["show"]}]});const w=new d(!1);var M=n({id:"modal",title:"modal",description:"Use `Modal` inside `Modals`\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Modals, Modal, Button } from '@cantinc/ui'\n\nconst show = new State(false)\n\ninnet(\n  <>\n    <Button onclick={() => { show.value = true }}>\n      show\n    </Button>\n    <Modals>\n      <show state={show}>\n        <Modal onclose={() => { show.value = false }}>\n          <slot name='content'>\n            Content\n          </slot>\n        </Modal>\n      </show>\n    </Modals>\n  </>,\n  dom,\n)",example:[{type:"portal",props:{parent:document.body},children:[{type:a,children:[{type:"show",props:{state:w},children:[{type:l,props:{onclose:()=>{w.value=!1}},children:[{type:"slot",props:{name:"content"},children:["Content"]}]}]}]}]},{type:p,props:{onclick:()=>{w.value=!0}},children:["show"]}]}),v=n({id:"search",title:"search",description:"This example present that you can use search query params to show modals.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Modals, Modal, Button, Flex, closeRouterModal } from '@cantinc/ui'\n\ninnet(\n  <>\n    <a href='?modal=test1'>Test 1</a>\n    <a href='?modal=test2'>Test 2</a>\n    <Modals>\n      <router ish search='modal'>\n        <slot name='test1'>\n          <Modal headButtons={[]}>\n            <Button onclick={closeRouterModal}>\n              Close\n            </Button>\n          </Modal>\n        </slot>\n        <slot name='test2'>\n          <Modal onclose={closeRouterModal}>\n            <slot name='title'>\n              Test 2\n            </slot>\n            <slot name='content'>\n              <Flex gap={16}>\n                <a href='?modal=test2&modal=test1'>\n                  Keep current modal\n                </a>\n                <a href='?modal=test1'>\n                  Hide current modal\n                </a>\n              </Flex>\n            </slot>\n          </Modal>\n        </slot>\n      </router>\n    </Modals>\n  </>,\n  dom,\n)",example:[{type:"portal",props:{parent:document.body},children:[{type:a,children:[{type:"router",props:{ish:!0,search:"modal"},children:[{type:"slot",props:{name:"test1"},children:[{type:l,props:{headButtons:[]},children:[{type:p,props:{onclick:m},children:["Close"]}]}]},{type:"slot",props:{name:"test2"},children:[{type:l,props:{onclose:m},children:[{type:"slot",props:{name:"title"},children:["Test 2"]},{type:"slot",props:{name:"content"},children:[{type:i,props:{gap:16},children:[{type:"a",props:{href:"?modal=test2&modal=test1"},children:["Keep current modal"]},{type:"a",props:{href:"?modal=test1"},children:["Hide current modal"]}]}]}]}]}]}]}]},{type:"a",props:{href:"?modal=test1"},children:["Test 1"]},{type:"a",props:{href:"?modal=test2"},children:["Test 2"]}]});const b=new d(!1);var B=[M,n({id:"title",title:"title",description:"Use `title` slot to add a title.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Modals, Modal, Button } from '@cantinc/ui'\n\nconst show = new State(false)\n\ninnet(\n  <>\n    <Button onclick={() => { show.value = true }}>\n      show\n    </Button>\n    <Modals>\n      <show state={show}>\n        <Modal onclose={() => { show.value = false }}>\n          <slot name='title'>\n            Title\n          </slot>\n          <slot name='content'>\n            Content\n          </slot>\n        </Modal>\n      </show>\n    </Modals>\n  </>,\n  dom,\n)",example:[{type:"portal",props:{parent:document.body},children:[{type:a,children:[{type:"show",props:{state:b},children:[{type:l,props:{onclose:()=>{b.value=!1}},children:[{type:"slot",props:{name:"title"},children:["Title"]},{type:"slot",props:{name:"content"},children:["Content"]}]}]}]}]},{type:p,props:{onclick:()=>{b.value=!0}},children:["show"]}]}),u,f,v],x=()=>({type:t,props:{component:a,name:"Modals",description:"# Modals\n\nUse this component to show modal windows\n\n```typescript\nimport { Modals, Modal } from '@cantinc/ui'\n```\n\n## Usage\n\nAdd `Modals` into a place you want to put modal HTML elements.\n\n```tsx\nfunction App () {\n  return (\n    <>\n      <div id='root'>...</div>\n      <Modals>\n        ...\n      </Modals>\n    </>\n  )\n}\n```\n\n*Note: put it inside an element without parents that have css property of `transform`.*\n\nYou can use `portal` to add modals anywhere.\n\n```tsx\nfunction Global () {\n  return (\n    <portal parent={document.body}>\n      \x3c!-- Other stuff --\x3e\n      <Modals>\n        ...\n      </Modals>\n    </portal>\n  )\n}\n```\n",examples:B}});export{x as default};
