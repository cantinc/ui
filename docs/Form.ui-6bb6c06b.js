import{e as n,C as e}from"./Component-e65f1150.js";import{aa as o,ab as r,K as t}from"./docs-285c9da7.js";import{B as a}from"./Button-f65cd475.js";import{F as m}from"./FormInput-245453eb.js";import{F as s}from"./FormSelector-fe30d311.js";import"./Typography-61c698ac.js";import"./useField-6da6bd3f.js";import"./Input-000cbda0.js";import"./Icon-13402875.js";import"./Selector-4595067b.js";import"./DropdownMenu-a01ea61d.js";import"./Dropdown-0fbd78f1.js";var i=n({id:"action",title:"action",description:"Use `formActionHandler` context to handle all forms actions in one place.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport {\n  Form,\n  notify,\n  formActionHandler,\n  FormContext,\n  FormInput,\n  FormSelector,\n  Button,\n} from '@cantinc/ui'\n\nconst handleFormAction = (action: string, form: FormContext) => {\n  const params = Array\n    .from(form.fields)\n    .reduce((prev, field) =>\n      `${prev}\\n\\n${field.name}: ${field.state.value}`,\n    '')\n\n  notify(`action: ${action}${params}`)\n}\n\ninnet(\n  <context for={formActionHandler} set={handleFormAction}>\n    <Form action='/user'>\n      <FormInput name='name' label='Name' required />\n      <FormSelector\n        exact\n        name='gender'\n        label='Gender'\n        required\n        values={[\n          { value: 'male', label: 'Male' },\n          { value: 'female', label: 'Female' },\n        ]}\n      />\n      <Button>\n        Save\n      </Button>\n    </Form>\n  </context>,\n  dom,\n)",example:{type:"context",props:{for:o,set:(n,e)=>{const o=Array.from(e.fields).reduce(((n,e)=>`${n}\n\n${e.name}: ${e.state.value}`),"");t(`action: ${n}${o}`)}},children:[{type:r,props:{action:"/user"},children:[{type:m,props:{name:"name",label:"Name",required:!0}},{type:s,props:{exact:!0,name:"gender",label:"Gender",required:!0,values:[{value:"male",label:"Male"},{value:"female",label:"Female"}]}},{type:a,children:["Save"]}]}]}});var l=[n({id:"onsuccess",title:"onsuccess",description:"By default, the form only validates self and call `onsuccess` if the validation is passed.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Form, FormInput, Button, notify, Notifications } from '@cantinc/ui'\n\nconst handleSuccess = (form: FormContext) => {\n  const params = Array\n    .from(form.fields)\n    .reduce((prev, field) =>\n        `${prev}\\n\\n${field.name}: ${field.state.value}`,\n    '')\n\n  notify(params)\n}\n\ninnet(\n  <>\n    <Form onsuccess={handleSuccess}>\n      <FormInput\n        name='name'\n        required\n        label='Name'\n      />\n      <FormInput\n        name='password'\n        type='password'\n        required\n        label='Password'\n      />\n      <Button>\n        Log-in\n      </Button>\n    </Form>\n    <Notifications />\n  </>,\n  dom,\n)",example:{type:r,props:{onsuccess:n=>{const e=Array.from(n.fields).reduce(((n,e)=>`${n}\n\n${e.name}: ${e.state.value}`),"");t(e)}},children:[{type:m,props:{name:"name",required:!0,label:"Name"}},{type:m,props:{name:"password",type:"password",required:!0,label:"Password"}},{type:a,children:["Log-in"]}]}}),i],p=()=>({type:e,props:{component:r,name:"Form",description:"# Form\n\nUse this component to add a form.\n\n```typescript\nimport { Form } from '@cantinc/ui'\n```\n",examples:l}});export{p as default};
