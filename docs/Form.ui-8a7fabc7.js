import{e as n,C as e}from"./Component-cfed9d28.js";import{ay as o,an as t,a2 as r,B as a,Q as i,a as m,az as s}from"./docs-ec277aa5.js";import{F as l}from"./FormInput-8b4f2375.js";import{F as p}from"./FormSelector-d7018bb0.js";import{p as c}from"./parseForm-8c7359ac.js";import"./Typography-4afc4693.js";import"./useField-2f755769.js";import"./Input-3f46a5c2.js";import"./Selector-7baaff6f.js";import"./DropdownMenu-130fadb0.js";import"./Dropdown-8451fff6.js";const d=/{([a-zA-Z0-9]+)}/g;var f=n({id:"action",title:"action",description:"Use `formActionHandler` context to handle all forms actions in one place.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport {\n  Form,\n  FormInput,\n  FormSelector,\n  Button,\n  Buttons,\n  notify,\n  formActionHandler,\n  FormActionHandle,\n} from '@cantinc/ui'\n\nconst handleFormAction: FormActionHandle = form => {\n  const params = Array\n    .from(form.fields)\n    .reduce((prev, field) =>\n      `${prev}\\n\\n${field.name}: ${field.state.value}`,\n    '')\n\n  notify(`action: ${use(form.action)}${params}`)\n}\n\ninnet(\n  <context for={formActionHandler} set={handleFormAction}>\n    <Form action='/user'>\n      <FormInput name='name' label='Name' required />\n      <FormSelector\n        exact\n        name='gender'\n        label='Gender'\n        required\n        values={[\n          { value: 'male', label: 'Male' },\n          { value: 'female', label: 'Female' },\n        ]}\n      />\n      <Buttons>\n        <Button flex>\n          Save\n        </Button>\n      </Buttons>\n    </Form>\n  </context>,\n  dom,\n)",example:{type:"context",props:{for:o,set:n=>{const e=Array.from(n.fields).reduce(((n,e)=>`${n}\n\n${e.name}: ${e.state.value}`),"");i(`action: ${m(n.action)}${e}`)}},children:[{type:t,props:{action:"/user"},children:[{type:l,props:{name:"name",label:"Name",required:!0}},{type:p,props:{exact:!0,name:"gender",label:"Gender",required:!0,values:[{value:"male",label:"Male"},{value:"female",label:"Female"}]}},{type:r,children:[{type:a,props:{flex:!0},children:["Save"]}]}]}]}});var u=n({id:"formNotificationHandler",title:"formNotificationHandler",description:"Use `formNotificationHandler` context to handle all forms notifications in one place.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { placeholder } from '@cantinc/utils'\n\nimport {\n  Form,\n  FormInput,\n  Notifications,\n  Button,\n  Buttons,\n  notify,\n  parseForm,\n  formNotificationHandler,\n} from '@cantinc/ui'\n\nconst handleFormNotification: FormNotificationHandle = (notification, form) => {\n  notify(placeholder(notification, parseForm(form)), 'success')\n}\n\ninnet(\n  <context for={formNotificationHandler} set={handleFormNotification}>\n    <Form notification='Item \"{name}\" added' action='/items'>\n      <FormInput name='name' label='Name' required />\n      <Buttons>\n        <Button flex>\n          Add\n        </Button>\n      </Buttons>\n    </Form>\n    <Notifications />\n  </context>,\n  dom,\n)",example:{type:"context",props:{for:s,set:n=>{var e,o;n.notification&&i((e=n.notification,o=c(n),e.replace(d,((n,e)=>{var t;return null!==(t=o[e])&&void 0!==t?t:n}))),"success")}},children:[{type:t,props:{notification:'Item "{name}" added',action:"/items"},children:[{type:l,props:{name:"name",label:"Name",required:!0}},{type:r,children:[{type:a,props:{flex:!0},children:["Add"]}]}]}]}});var y=[n({id:"onsuccess",title:"onsuccess",description:"By default, the form only validates self and call `onsuccess` if the validation is passed.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport {\n  Form,\n  FormInput,\n  Button,\n  Buttons,\n  notify,\n  Notifications,\n} from '@cantinc/ui'\n\nconst handleSuccess = (form: FormContext) => {\n  const params = Array\n    .from(form.fields)\n    .reduce((prev, field) =>\n        `${prev}\\n\\n${field.name}: ${field.state.value}`,\n    '')\n\n  notify(params)\n}\n\ninnet(\n  <>\n    <Form onsuccess={handleSuccess}>\n      <FormInput\n        name='name'\n        required\n        label='Name'\n      />\n      <FormInput\n        name='password'\n        type='password'\n        required\n        label='Password'\n      />\n      <Buttons>\n        <Button flex>\n          Log-in\n        </Button>\n      </Buttons>\n    </Form>\n    <Notifications />\n  </>,\n  dom,\n)",example:{type:t,props:{onsuccess:n=>{const e=Array.from(n.fields).reduce(((n,e)=>`${n}\n\n${e.name}: ${e.state.value}`),"");i(e)}},children:[{type:l,props:{name:"name",required:!0,label:"Name"}},{type:l,props:{name:"password",type:"password",required:!0,label:"Password"}},{type:r,children:[{type:a,props:{flex:!0},children:["Log-in"]}]}]}}),n({id:"reset",title:"reset",description:"You can use a `Button` with type of `reset`.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Form, FormInput, Button, Buttons } from '@cantinc/ui'\n\ninnet(\n  <Form>\n    <FormInput\n      name='name'\n      required\n      defaultValue='Mike'\n      label='Name'\n    />\n    <FormInput\n      name='surname'\n      required\n      defaultValue='Deight'\n      label='Surname'\n    />\n    <Buttons>\n      <Button flex view='secondary' type='reset'>\n        Reset\n      </Button>\n      <Button flex>\n        Log-in\n      </Button>\n    </Buttons>\n  </Form>,\n  dom,\n)",example:{type:t,children:[{type:l,props:{name:"name",required:!0,defaultValue:"Mike",label:"Name"}},{type:l,props:{name:"surname",required:!0,defaultValue:"Deight",label:"Surname"}},{type:r,children:[{type:a,props:{flex:!0,view:"secondary",type:"reset"},children:["Reset"]},{type:a,props:{flex:!0},children:["Log-in"]}]}]}}),f,u],F=()=>({type:e,props:{component:t,name:"Form",description:"# Form\n\nUse this component to add a form.\n\n```typescript\nimport { Form } from '@cantinc/ui'\n```\n",examples:y}});export{F as default};
