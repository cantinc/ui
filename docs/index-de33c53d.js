import{M as n}from"./docs-25aea466.js";import{T as t}from"./Typography-e6d5a0fd.js";function o(){return{type:t,children:[{type:n,props:{text:"# @cantinc/ui\n\n**CANT inc. UI** based on [innet](https://www.npmjs.com/package/innet).\n\nThis is a library of UI components you can use with [@innet/dom](https://www.npmjs.com/package/@innet/dom) application.\n\n## Usage\n\n### Start application\n\nCreate a new project with the next command in terminal console:\n\n```bash\nnpx innetjs init my-app -t fe\n```\n\n*change `my-app` if you want to call it another way*\n\nGo into my-app and run:\n\n```bash\nnpm start\n```\n\nGo to [localhost:3000](http://localhost:3000) in your browser, and you can see default application.\n\n### Usage of components\n\nStop the server and install `@cantinc/ui`\n\n```bash\nnpm i @cantinc/ui\n```\n\nThen start again.\n\nIn the docs, you can find examples of components, you can copy any example and put into `src/index.tsx` file of your project (*clear `src` folder before*).\n\n\n### Styles\n\nA big part of the library components has a `class` prop.\n\nProvide the `class` as a string to add one.\n\n```tsx\nimport innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Button } from '@cantinc/ui'\n\ninnet(\n  <Button class='test'>\n    Click me\n  </Button>,\n  dom,\n)\n```\n\nOr provide an object of classes.\n\nKeys are elements of a component or different states.\n\n```tsx\nimport innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Checkbox } from '@cantinc/ui'\n\ninnet(\n  <Checkbox\n    class={{\n      root: 'test-root',\n      disabled: 'test-disabled',\n      icon: 'test-icon',\n    }}\n  />,\n  dom,\n)\n```\n\nValues can be an array, string, or a function which returns them.\n\nMore information here [html-classes](https://www.npmjs.com/package/html-classes).\n\n```tsx\nimport innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Button } from '@cantinc/ui'\n\nconst state = new State('foo')\n\ninnet(\n  <>\n    <Button\n      onclick={() => { state.value = 'bar' }}\n      class={{\n        root: [\n          'test1-root',\n          'test2-root',\n          ['test3-root'],\n          () => `${state.value}-root`,\n        ],\n        content: () => ['test-content', `${state.value}-content`],\n      }}>\n      Click me\n    </Button>\n    <Button class={() => state.value} />\n  </>,\n  dom,\n)\n```\n\nYou can use `style` prop to add inline styles.\n\n```tsx\nimport innet from 'innet'\nimport dom from '@innet/dom'\nimport { State } from 'watch-state'\n\nimport { Button } from '@cantinc/ui'\n\nconst state = new State('display:none')\n\ninnet(\n  <>\n    <Button\n      onclick={() => { state.value = '' }}\n      style='background:red'>\n      Click me\n    </Button>\n    <Button style={() => state.value} />\n  </>,\n  dom,\n)\n```\n"}}]}}export{o as default};
