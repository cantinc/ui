import{e as n,C as e}from"./Component-a91cba9b.js";import{an as o,af as t,O as r,ao as a}from"./docs-3e04aeb9.js";import{B as i}from"./Button-81a7507a.js";import{F as m}from"./FormInput-14050bf4.js";import{F as s}from"./FormSelector-afc88d5e.js";import{p as l}from"./parseForm-4ca918bf.js";import{B as p}from"./Buttons-c6f085ba.js";import"./Typography-af300282.js";import"./useField-1ba924d9.js";import"./Input-a8f874de.js";import"./Selector-f6036146.js";import"./DropdownMenu-86220aa4.js";import"./Dropdown-eddc23fe.js";const c=/{([a-zA-Z0-9]+)}/g;var d=n({id:"action",title:"action",description:"Use `formActionHandler` context to handle all forms actions in one place.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport {\n  Form,\n  FormInput,\n  FormSelector,\n  Button,\n  notify,\n  formActionHandler,\n  FormActionHandle,\n} from '@cantinc/ui'\n\nconst handleFormAction: FormActionHandle = (action, form) => {\n  const params = Array\n    .from(form.fields)\n    .reduce((prev, field) =>\n      `${prev}\\n\\n${field.name}: ${field.state.value}`,\n    '')\n\n  notify(`action: ${action}${params}`)\n}\n\ninnet(\n  <context for={formActionHandler} set={handleFormAction}>\n    <Form action='/user'>\n      <FormInput name='name' label='Name' required />\n      <FormSelector\n        exact\n        name='gender'\n        label='Gender'\n        required\n        values={[\n          { value: 'male', label: 'Male' },\n          { value: 'female', label: 'Female' },\n        ]}\n      />\n      <Button>\n        Save\n      </Button>\n    </Form>\n  </context>,\n  dom,\n)",example:{type:"context",props:{for:o,set:(n,e)=>{const o=Array.from(e.fields).reduce(((n,e)=>`${n}\n\n${e.name}: ${e.state.value}`),"");r(`action: ${n}${o}`)}},children:[{type:t,props:{action:"/user"},children:[{type:m,props:{name:"name",label:"Name",required:!0}},{type:s,props:{exact:!0,name:"gender",label:"Gender",required:!0,values:[{value:"male",label:"Male"},{value:"female",label:"Female"}]}},{type:i,children:["Save"]}]}]}});var f=n({id:"formNotificationHandler",title:"formNotificationHandler",description:"Use `formNotificationHandler` context to handle all forms notifications in one place.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\nimport { placeholder } from '@cantinc/utils'\n\nimport {\n  Form,\n  FormInput,\n  Notifications,\n  Button,\n  notify,\n  parseForm,\n  formNotificationHandler,\n} from '@cantinc/ui'\n\nconst handleFormNotification: FormNotificationHandle = (notification, form) => {\n  notify(placeholder(notification, parseForm(form)), 'success')\n}\n\ninnet(\n  <context for={formNotificationHandler} set={handleFormNotification}>\n    <Form notification='Item \"{name}\" added' action='/items'>\n      <FormInput name='name' label='Name' required />\n      <Button>\n        Add\n      </Button>\n    </Form>\n    <Notifications />\n  </context>,\n  dom,\n)",example:{type:"context",props:{for:a,set:(n,e)=>{var o,t;r((o=n,t=l(e),o.replace(c,((n,e)=>{var o;return null!==(o=t[e])&&void 0!==o?o:n}))),"success")}},children:[{type:t,props:{notification:'Item "{name}" added',action:"/items"},children:[{type:m,props:{name:"name",label:"Name",required:!0}},{type:i,children:["Add"]}]}]}});var u=[n({id:"onsuccess",title:"onsuccess",description:"By default, the form only validates self and call `onsuccess` if the validation is passed.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Form, FormInput, Button, notify, Notifications } from '@cantinc/ui'\n\nconst handleSuccess = (form: FormContext) => {\n  const params = Array\n    .from(form.fields)\n    .reduce((prev, field) =>\n        `${prev}\\n\\n${field.name}: ${field.state.value}`,\n    '')\n\n  notify(params)\n}\n\ninnet(\n  <>\n    <Form onsuccess={handleSuccess}>\n      <FormInput\n        name='name'\n        required\n        label='Name'\n      />\n      <FormInput\n        name='password'\n        type='password'\n        required\n        label='Password'\n      />\n      <Button>\n        Log-in\n      </Button>\n    </Form>\n    <Notifications />\n  </>,\n  dom,\n)",example:{type:t,props:{onsuccess:n=>{const e=Array.from(n.fields).reduce(((n,e)=>`${n}\n\n${e.name}: ${e.state.value}`),"");r(e)}},children:[{type:m,props:{name:"name",required:!0,label:"Name"}},{type:m,props:{name:"password",type:"password",required:!0,label:"Password"}},{type:i,children:["Log-in"]}]}}),n({id:"reset",title:"reset",description:"You can use a `Button` with type of `reset`.\n",code:"import innet from 'innet'\nimport dom from '@innet/dom'\n\nimport { Form, FormInput, Button, Buttons } from '@cantinc/ui'\n\ninnet(\n  <Form>\n    <FormInput\n      name='name'\n      required\n      defaultValue='Mike'\n      label='Name'\n    />\n    <FormInput\n      name='surname'\n      required\n      defaultValue='Deight'\n      label='Surname'\n    />\n    <Buttons>\n      <Button flex view='secondary' type='reset'>\n        Reset\n      </Button>\n      <Button flex>\n        Log-in\n      </Button>\n    </Buttons>\n  </Form>,\n  dom,\n)",example:{type:t,children:[{type:m,props:{name:"name",required:!0,defaultValue:"Mike",label:"Name"}},{type:m,props:{name:"surname",required:!0,defaultValue:"Deight",label:"Surname"}},{type:p,children:[{type:i,props:{flex:!0,view:"secondary",type:"reset"},children:["Reset"]},{type:i,props:{flex:!0},children:["Log-in"]}]}]}}),d,f],F=()=>({type:e,props:{component:t,name:"Form",description:"# Form\n\nUse this component to add a form.\n\n```typescript\nimport { Form } from '@cantinc/ui'\n```\n",examples:u}});export{F as default};
