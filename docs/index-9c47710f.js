import{M as n,F as e}from"./docs-285c9da7.js";import{T as t}from"./Typography-61c698ac.js";const o=["primary","secondary","negative","warning","positive"],i=[0,10,20,30,40,50,60,70,80,90,100];function s(){const s=getComputedStyle(document.documentElement);return{type:t,children:[{type:n,props:{text:'# Typography\n\nNext, you can see the main typography elements.\n\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n\n## Horizontal Rules\n\n___\n\n---\n\n***\n\n## Emphasis\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## Blockquotes\n\n\n> Level 1\n>> Level 2\n>>> Level 3\n\n\n## Lists\n\nUnordered\n\n+ Create a list by starting a line with `+`, `-`, or `*`\n+ Sub-lists are made by indenting 2 spaces:\n    - Marker character change forces new list start:\n        * Ac tristique libero volutpat at\n        + Facilisis in pretium nisl aliquet\n        - Nulla volutpat aliquam velit\n+ Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## Code\n\nInline `code`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\n\nBlock code "fences"\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n``` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n\n## Tables\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\nRight aligned columns\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n## Fonts\n\nCANT inc. UI uses `Commissioner` as the main font.\n\nAdd next block into `head`.\n```html\n<link rel="preload" href="/fonts/Commissioner.woff2" as="font" type="font/woff2" crossorigin>\n<style>\n  @font-face {\n    font-family: \'Commissioner\';\n    font-style: normal;\n    font-weight: 400;\n    src: url("/fonts/Commissioner.woff2") format(\'woff2\');\n  }\n\n  html, body, button {\n    font-family: \'Commissioner\', sans-serif;\n  }\n</style>\n```\n'}},{type:"h2",children:["Color theme"]},{type:"h3",children:["Gray"]},i.map((n=>({type:e,props:{flex:!0,padding:16,style:`--color:var(--color-${n});background:var(--color);color:var(--color-${n>50?0:100})`},children:[`--color-${n}`,": ",s.getPropertyValue(`--color-${n}`)]})))," ",o.map((n=>[{type:"h3",children:[n]},i.map((t=>({type:e,props:{flex:!0,padding:16,style:`--color:var(--color-${n}-${t});background:var(--color);color:var(--color-${t>50?0:100})`},children:[`--color-${n}-${t}`,": ",s.getPropertyValue(`--color-${n}-${t}`)]})))]))]}}export{s as default};
